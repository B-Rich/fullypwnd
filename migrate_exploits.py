#!/usr/bin/python
import subprocess
import os
import hashlib
import string
from debug import Debug
from data_alchemy import *
from sqlalchemy import and_

rootMessage = """
Root privileges are required to run this program.
"""

longOptions = ['update-db']

debug = Debug()
debug.level = 0

def githash(data):
    s = hashlib.sha1()
    s.update("blob %u\0" %len(data))
    s.update(data)
    return s.hexdigest()

source_windows_base = "./exploitdb/platforms/windows/"
destination_windows_base = "./exploits/windows/"
script_extensions = ['py', 'pl', 'php']

def compile_exploits(os_family, service_name, exploit_type, exploit_source):
    if os_family.lower() == "windows":
        source_base = source_windows_base
        destination_base = destination_windows_base
    tmp_out = subprocess.Popen(["grep", "-Rl", service_name, source_base + exploit_type +"/"], stdout=subprocess.PIPE)
    service_out = subprocess.Popen(["grep", "\.c$"], stdin=tmp_out.stdout, stdout=subprocess.PIPE)
    service_files, service_err = service_out.communicate()

    for i in service_files.splitlines():
        if i != None and os.path.exists(i):
            source_filename = os.path.basename(i)
            compiled_filename, extension = source_filename.split(".")
            compiled_full_path = destination_base + service_name + "/" + compiled_filename + ".o"
            subprocess.call(["gcc", i, "-o", compiled_full_path])
            if os.path.exists(compiled_full_path):
                exploit_path = compiled_full_path
                exploit_file = open(exploit_path, 'r')
                exploit_file_contents = exploit_file.read()
                exploit_githash = githash(exploit_file_contents)
                exploit_sha1 = hashlib.sha1(exploit_file_contents).hexdigest()
                exploit_file.close()
                exploits = session.query(Exploits).filter(and_(Exploits.exploit_sha1 == exploit_sha1, Exploits.exploit_path == exploit_path)).all()
                if len(exploits) == 0:
                    exploit = Exploits(exploit_sha1 = exploit_sha1, exploit_githash = exploit_githash, exploit_source = exploit_source, 
                            exploit_path = exploit_path, os_family = os_family, service_name = service_name)
                    session.add(exploit)
                    session.commit()
    
def copy_exploits(os_family, service_name, exploit_type, exploit_source):
    if os_family.lower() == "windows":
        source_base = source_windows_base
        destination_base = destination_windows_base
    tmp_out = subprocess.Popen(["grep", "-Rl", service_name, source_base + exploit_type +"/"], stdout=subprocess.PIPE)
    for script_extension in script_extensions:
        service_out = subprocess.Popen(["grep", "\." + script_extension + "$"], stdin=tmp_out.stdout, stdout=subprocess.PIPE)
        service_files, service_err = service_out.communicate()

        for i in service_files.splitlines():
            if i != None and os.path.exists(i):
                source_filename = os.path.basename(i)
                destination_path = destination_base + service_name + "/" + source_filename
                subprocess.call(["cp", i, destination_path])
                if os.path.exists(destination_path):
                    exploit_path = destination_path
                    exploit_file = open(exploit_path)
                    exploit_file_contents = exploit_file.read()
                    exploit_githash = githash(exploit_file_contents)
                    exploit_sha1 = hashlib.sha1(exploit_file_contents).hexdigest()
                    exploit_file.close()
                    exploits = session.query(Exploits).filter(Exploits.exploit_sha1 == exploit_sha1).all()
                    if len(exploits) == 0:
                        exploit = Exploits(exploit_sha1 = exploit_sha1, exploit_githash = exploit_githash, exploit_source = exploit_source, 
                                    exploit_path = exploit_path, os_family = os_family, service_name = service_name)
                        session.add(exploit)
                        session.commit()
                    
def main():
    os_families = ['Windows']#, 'linux']
    service_names = ['smb']#, 'ftp'] 
    exploit_types = ['remote']#, 'local']
    exploit_sources = ['exploitdb']
    for os_family in os_families: 
        for service_name in service_names:
            for exploit_type in exploit_types:
                for exploit_source in exploit_sources:
                    compile_exploits(os_family, service_name, exploit_type, exploit_source)
                    copy_exploits(os_family, service_name, exploit_type, exploit_source)

if __name__ == "__main__":
    if os.getuid() == 0:
        main()
    else:
        print rootMessage
        sys.exit(1)
